<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// Direction constants
const int n = 0;
const int e = 1;
const int s = 2;
const int w = 3;

// Action constants
const int a_blank = 0;
const int a_forward = 1;
const int a_turn = 2;

int n_turn = 0;
int n_forward = 0;
int n_steps = 0;

bool b_is_clean = false;

// 3D array of rules - indexed as [y][x][d]
int rules[3][3][4] = { 
                        { 
                            {
                                0, 0, 0, 0
                            },
                            {
                                0, 0, 0, 0
                            },
                            {
                                0, 0, 0, 0
                            }
                        },
						{ 
                            {
                                0, 0, 0, 0
                            },
                            {
                                0, 0, 0, 0
                            },
                            {
                                0, 0, 0, 0
                            }
                        },
						{ 
                            {
                                0, 0, 0, 0
                            },
                            {
                                0, 0, 0, 0
                            },
                            {
                                0, 0, 0, 0
                            }
                        }
                     };

// channels for syncing with the Room model
chan ch_forward;
chan ch_turn;

// clocks for simulating slow actions and counting time
clock ck;
clock time := 0.0;

// auxiliary size values
typedef int[0,2] count;
int size = 3;

// 2D array to know which spaces have been visited - indexed as [y][x]
int room [3][3] = {{1, 1, 1},
                   {1, 1, 1},
                   {1, 1, 1}};

// The robot's current position and direction
int x = 0;
int y = 0;
int d = n;

// put hardcoded rules into the matrix here
void preset_rules() {
    rules[0][0][n] = a_forward;
    //rules[1][0][n] = a_forward;
    //rules[2][0][n] = a_turn;
    //rules[2][0][e] = a_forward;
}

// shorthand for queries
bool completed_cycle() {
    return x == 0 &amp;&amp; y == 0 &amp;&amp; d == n &amp;&amp; b_is_clean;
}

// checks if turn is a legal action
bool can_turn() {
    if (completed_cycle()) {
        return false;
    }

	if (rules[y][x][d] == a_turn || rules[y][x][d] == a_blank) {
		return true;
	}
	return false;
}

// checks if forward is a legal action
bool can_move_forward() {
    if (completed_cycle()) {
        return false;
    }

	if (rules[y][x][d] == a_forward) {
		return true;
	}

	if (rules[y][x][d] == a_turn) {
		return false;
	}

    if (d == n) {
        return (y+1 &lt; size);
    } else if (d == e) {
        return (x+1 &lt; size);
    } else if (d == s) {
        return (y-1 &gt;= 0);
    } else if (d == w) {
        return (x-1 &gt;= 0);
    }
    return true;
}

// updates the robot's position
void forward() {
    rules[y][x][d] = a_forward;    

    if (d == n) {
        y = y+1;
    } else if (d == e) {
        x = x+1;
    } else if (d == s) {
        y = y-1;
    } else if (d == w) {
        x = x-1;
    }

}

// updates the robot's direction
void turn() {
    rules[y][x][d] = a_turn;

    d = (d+1) % 4;
}

// checks if all spaces have been visited
bool is_clean() {
    for (i: count) {
        for (j: count) {
            if (room[i][j] == 1) {
                return false;
            }
        }
    }
    return true;
}</declaration>
	<template>
		<name x="5" y="5">Robot</name>
		<declaration>// Place local declarations here.</declaration>
		<location id="id0" x="-255" y="-204">
			<name x="-272" y="-247">Done</name>
		</location>
		<location id="id1" x="-42" y="-204">
			<name x="-68" y="-238">Cleaning</name>
		</location>
		<location id="id2" x="-42" y="-59">
			<name x="-68" y="-34">Moving</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-331" y="-153">completed_cycle()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-408" y="-289">completed_cycle()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-297" y="-76">can_turn() &amp;&amp; ck &gt;= 4</label>
			<label kind="synchronisation" x="-204" y="-59">ch_turn!</label>
			<label kind="assignment" x="-246" y="-42">turn(), ck := 0</label>
			<nail x="-136" y="-76"/>
			<nail x="-136" y="-25"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-8" y="-170">can_move_forward() &amp;&amp; ck &gt;= 2</label>
			<label kind="synchronisation" x="-8" y="-153">ch_forward!</label>
			<label kind="assignment" x="-8" y="-136">forward(), ck := 0</label>
			<nail x="-17" y="-144"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-170" y="-187">!completed_cycle()</label>
			<label kind="assignment" x="-25" y="-264">room[y][x] = 0, b_is_clean = is_clean(), preset_rules()</label>
			<label kind="comments" x="-25" y="-289">Clean</label>
		</transition>
	</template>
	<template>
		<name>Room</name>
		<location id="id3" x="-127" y="-8">
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-263" y="-17">ch_turn?</label>
			<label kind="assignment" x="-501" y="17">n_turn := n_turn + 1, n_steps := n_steps + 1</label>
			<nail x="-187" y="-42"/>
			<nail x="-178" y="42"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-42" y="-17">ch_forward?</label>
			<label kind="assignment" x="-34" y="0">n_forward := n_forward + 1, n_steps := n_steps + 1</label>
			<nail x="-76" y="-42"/>
			<nail x="-85" y="34"/>
		</transition>
	</template>
	<system>system Robot, Room;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; x == 0 &amp;&amp; y == 0 &amp;&amp; d == n &amp;&amp; is_clean() &amp;&amp; n_forward == 10 &amp;&amp; n_turn == 16
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; x == 0 &amp;&amp; y == 0 &amp;&amp; d == n &amp;&amp; is_clean() &amp;&amp; n_forward == 10
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; x == 0 &amp;&amp; y == 0 &amp;&amp; d == n &amp;&amp; b_is_clean
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; room[1][1] == 0
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
